Assignments:-

1. LIST THE CONTENTS OF A DIRECTORY AND THEIR ATTRIBUTES
ls

2. Long list the content with file, directory ownership, permissions,sizes, etcâ€¦
ls -l

3. Display the size of the file in human readable format
ls -sh

4. Show all files and folders including hidden one
- CTRL + H 
- ls -a

5. list directories recursively
ls -R

6. Sort the files by size with largest at the top
ls -S

7. Sort the files by last time modified displaying the newest first.
ls -t

8. Diplay the location of a program/command, where it is installed.
-whereis command if it is in your path variable
-locate gives a long list
-which gives the path

9. Which command is used to switch directory from one to another
cd

10. List all the environment variables set for the current shell environment
-env this prints all the environment variables
-printenv we can specify values

11. Did you notice something in the output of "env" command?
-Evironment variables
-We cannot set a value it displays all the environment variables

12. Which command is used to print the text or any variables value in the Console/Terminal?
echo

13. Print the value of the env variable "PATH" on the console
printenv PATH

14. Is linux a case-sensitive operating system?
Yes, it is built using C language and C is a case sensitive language

15. Is, "Ls" same as "ls"?
No.

16. Display your currently logged in user
users

17. how do you change the currrently logged in user to another user?
su -l <username>

18. Which command is used to leave a shell environment that you are currently logged in to?
sudo -s /usr/bin/bash

19. How do you reboot the system?
sudo reboot 

20. How do you shutdown the system?
sudo shutdown

21. Display all the major running processes in the system
-ps
-pstree
-top

22. Understand the output of command used in above question of displaying processes, explain the meaning of each column and what data it displays?
-PID shows processID of the running task
-USER displays owner of task 
-PR tasks priority
-NI value of task (+ve value means lower priority) (-ve value means higher priority)\
_VIRT total virtual memory used by task
-RES Resident size, actual physical memory
-SHR shared memory used by task
-S current state 'S' means sleeping 'R' means running 'T' means Traced
-%CPU CPU usage 
-%MEM Memory usage of task
-TIME+ CPU time

23. Display the name of the system kernel
uname -s

24. display the kernel release number
uname -r

25. display the machine type of the current kernel
uname -m

26. Display the name of the operating system that the kernel is running on
uname -o

27. Display all info that uname command can show.
uname -a

28. Display the name of directory that you are currently pointing to
pwd 

29. change the current directory to another directory that you have in your system.
cd

30. Go up one directory
cd ..

31. Return to last directory
cd -

32.change the current directory to home(logged in user's) directory
-cd
-cd ~

33. How to check all the command used from the prompt (Command History)
history

34. In which file the history of commands are stored in?
.bash_history

35. How many lines of history does the system keep and from where you can change it?
-In my case its by default 1000
-We can change it by setting the value for HISTSIZE and HISTFILESIZE

36. How can you modify bash's history behaviour
-By default it saves the session to bash history file once seesion is over, to cahnge this beahviour we can use
-PROMPT_COMMAND='history -a'

37. Display all the commands entered so far, now, try to run a particular command from the history list without typing that command.
using arrow keys

NOTE:- TAB key is your friend when it comes to command completion and having long file and directory names autocompleted at the bash prompt for you. JUST BE LAZY AND USE TAB KEY FOR AUTO COMPLETION ;-)

38. What are the different types of shell and where are they used and how do we use them?
- TYPES: Bourne Shell(sh), GNU Bourne-Again Shell(bash), C Shell(csh), Korn Shell(ksh),Z Shell(zsh) etc.
- Shell becomes an interface between the user programs and the kernel, whenever user wants to use kernel utilities he executes his program in shell and the shell interacts with kernel to fetch the details.
- Create a file with extension .sh, start thescript file with shebang for eg. #!/bin/env bash, write some code and save the file, for exectuing type bash file_name.sh

39. What is the difference between login shell and non-login shell?
-Login shell starts automatically after a login and non-login shell is started by a program
-Login shell outputs with "-" precedding to bash or su whereas non login shell does not have any "-" when executing echo $0

40. How do we start login shell and non-login shell?
- Login shell is started successfully after the login 
- Non-login shell is created using command.

41. What happens when you start a login shell (which files are read and used and Why)?
 /etc/profile ~/.bash_profile, ~/.bashrc files are read and used as they are the Shell configuration Files and contains the related information 

42. What happens when you start a non-login shell (Which files are read and used and Why)?
 ~/.bashrc, /etc/bashrc, /etc/profile.d/ files are read and used as they are the Shell configuration Files and contains the related information

43. What are Shell Configuration Files, why do we need it?
- /etc/profile : executed during login and provides initial environment variables and PATH locations
- /etc/bashrc : you can define your default prompt and add alias information 
- ~/.bash_profile : used for login process, can be used by each user to add individual entries.
- ~/.bashrc : contains individual specific configurations, used to place any aliases.

44. Explain the Order of file usage from the system/user's home directory when user logs in to the System.
 /etc/profile -> /etc/profile.d/ -> ~/.bash_profile -> ~/.bashrc -> etc/bashrc

45. What are Shell Variables, list major shell variables and what do they represent?
- Shell variable is a special variable that is set by shell and is required by the shell in order to function correctly. 
- positional parameters: "$1" used to fetch a single argument, "$@" used to fetch all the arguments, "$#" counts the number of arguments 
- Local variable : to keep a variable for a subprogram distinct and do not allow it to change the value of global variable.

46. How we see all our env variables?
-env
-printenv

47. How we see all env variables in alphabical order?
env | sort

48. What Format does the env var and its values are stored?
Name/Value pair

49. How do you create your own varible?
- var="hello" -> current shell
- export var="hello" -> processes started from current shell
- sudo -H gedit /etc/environment and type var="hello" -> permanent system wide

50. How do you start a new bash shell?
- click on terminal: by default many linux systems has bash shell
-sudo -s /usr/bin/bash

51. Difference between Local/Shell variables to Global Variable
-Local variable has a local scope whereas Global variable has a global scope
-Local variable is declared inside a function and global is declared outside the function 
-Local cannot be shared whereas global can be shared
-Local is stored in stack whereas Global is shared in fixed location

52. Making a variable accessible from other the shell in the system.
- sudo -H gedit /etc/environment and type var="hello" -> permanent system wide 
- You need to re-login

53. Show the real life use case of exporting a variable
- You can export a variable from parent process to the child processes.
- Simply set the value for a variable before exporting "export name[=value]"
- export -p to check the exported variables

54. Convert the above script file into a command, The file should run with "myappp" instead of "myapp.sh"
- Give execution rights to the script file using chmod u+x file_name.sh
- Append the path of the executable script file to PATH cariable in .bash_profile file
- Write a code in script file starting with shebang "#!/usr/bin/env bash" and then save it.
- Now you need to source .bash_profile once then you can run your myapp.sh as a command

55. What is Globbing? Explain in depth with examples?
-Also called as path name expansion
-It recognizes the wildcard pattern and expands it into its path name
-wildcards : *, ?, [], !, Ranges [a-z] and [0-9]
-globbing prevention to escape from special characters use \ or '' or "" 
- for eg we need to find a file name rambo, then we can search using ls r*, you will get rambo

56. List all entries with extension ".sh"
ls *.sh

57. List all entries with numbers in it.
ls *[0-9]*

58. List all entries that starts with a character and ends with a number
ls [{a-z},{A-Z}]*[0-9]

59. List all entries that name length more than 5 characters
ls ??????*

60. What is Quoting? and Why do we need it?
-Quoting in shell is to disable special working of characters
-It is used to remove the special behaviour of predefined characters for eg. metacharacters

61. Write few(minimum 3) unique examples that shows, how a particular problem is solved using Quoting.
- echo Hello; World it will print Hello 
  and if we use echo Hello\; World it will print Hello; World
- echo I have $1200 will give error 
   we can correct it by echo "I have \$1200"
- echo It's Shell Programming will give error we can correct it by 
  echo 'It\'s Shell Programming

62. How do you find a particular files/directories based on a particular search criteria?
HINT:- look for commands -> locate, find and whereis
-find: finds is an aggressive search which can search files using ownername,filename, date modified etc
-locate: find files that are updated in the database
-whereis: whereis command is used to locate the binary, the source code and the online manual page for any specified program.

63. Write major difference between locate, find and whereis?
-locate can locate file from any location you are present provided if you know the correct file_name and the database is updated
-find can search for all the files provided you know approximate filenames
-whereis is not used for searching files

64. How Globbing is different from locate, find and whereis?
Globbling concept can be used within the locate, find and whereis command to make the search more powerful.

65. Explain the Linux File System.
The Linux file system contains the following sections:
-The root directory (/)
-A specific data storage format 
-A partition or logical volume having a particular file system.
Features:
-Case Sensitivity, files can be stored without any extension, distinguishes between standard and hidden files
Types:
-EXT3, EXT4, BTRFS, XFS etc

66. Explain absolute and Relative Paths
-Absolute path is location of a file or directory from the root directory (complete path)
-Relative path is path starting from your current directory and not from root (pwd)

67. What are the different ways of creating a File in linux System? Write an example of each and the difference between them.
-touch : touch file_name
-Redirect : > file_name
-cat : cat > file_name
-echo : echo 'hello' > file_name
-printf : printf 'hello\n' file_name
-Using text editors : vi|vim|nano file_name

68. In how many ways we can delete the files from linux system? write an example of each and teh difference between them.
- remove : rm file_name
- unlink : unlink file_name

69. Archiving files using linux command, write a command to archive set of files from linux commands.
tar -cvf <name_of_archive_file>.tar <directory>
tar -czvf <name_of_archive_file>.tgz <directory> this is using gzip

70. Extract the archived files from the above step.
tar -xvf <name_of_archive_file>.tar 
tar -xzvf <name_of_archive_file>.tgz this is using gzip